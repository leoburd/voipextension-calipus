<?php
/**
 * @file
 *
 * Voicemail Module Callbacks and Manipulation
 */

/**
 * Load the required libraries at the startup of the module.
 */
module_load_include('inc', 'voicemail', 'includes/voicemail.constants');
module_load_include('inc', 'voicemail', 'includes/voicemail.cck_fields');
module_load_include('inc', 'voicemail', 'includes/voicemail.field_operations');
module_load_include('inc', 'voicemail', 'includes/voicemail.form');

/**
 * Implementation of hook_menu().
 */
function voicemail_menu() {
  $items = array();

  $items['user/%user/voicemail/sent'] = array(
    'title' => 'Voicemail Sent',
    'page callback' => 'voicemail_user_voicemail_sent',
    'access callback' => 'voicemail_views_user_access',
    'access arguments' => array(VOICEMAIL_HAVE_MAILBOX_ACCESS),
    'type' => MENU_LOCAL_TASK
  );

  $items['user/%user/voicemail/received'] = array(
    'title' => 'Voicemail Received',
    'page callback' => 'voicemail_user_voicemail_received',
    'access callback' => 'voicemail_views_user_access',
    'access arguments' => array(VOICEMAIL_HAVE_MAILBOX_ACCESS),
    'type' => MENU_LOCAL_TASK
  );

  $items['node/%node/voicemail/sent'] = array(
    'title' => 'Voicemail Sent',
    'page callback' => 'voicemail_node_voicemail_sent',
    'access callback' => 'voicemail_views_node_access',
    'access arguments' => array(VOICEMAIL_HAVE_MAILBOX_ACCESS),
    'type' => MENU_LOCAL_TASK
  );

  $items['node/%node/voicemail/received'] = array(
    'title' => 'Voicemail Received',
    'page callback' => 'voicemail_node_voicemail_received',
    'access callback' => 'voicemail_views_node_access',
    'access arguments' => array(VOICEMAIL_HAVE_MAILBOX_ACCESS),
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 * Access callback for Voicmail implemented views for Users.
 * @return
 *   Boolean TRUE if authorized else FALSE
 */
function voicemail_views_user_access($string, $account = NULL, $reset = FALSE) {
  $uid = arg(1);
  module_load_include('inc', 'voipextension', 'includes/voipextension.api');
  $voipextension = VoipExtension::getVoipExtensionFromUid($uid);

  if (isset($voipextension->veid) && $voipextension->veid > 0) {
    $node = $voipextension->node;
    if (variable_get('voip_voicemail_use_'. $node->type, FALSE)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for Voicmail implemented views for Users.
 * @return
 *   Boolean TRUE if authorized else FALSE
 */
function voicemail_views_node_access($string, $account = NULL, $reset = FALSE) {
  $nid = arg(1);
  module_load_include('inc', 'voipextension', 'includes/voipextension.api');
  $voipextension = VoipExtension::getVoipExtensionFromNid($nid);
  if (isset($voipextension->veid) && $voipextension->veid > 0) {
    $node = $voipextension->node;
    if (variable_get('voip_voicemail_use_'. $node->type, FALSE)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function voicemail_perm() {
  return array(VOICEMAIL_HAVE_MAILBOX_ACCESS, VOICEMAIL_ADMINISTER_MAILBOX);
}

/**
 * Implementation of hook_menu_alter().
 *
 * Remove the unnecessary links from the secondary tab.
 */
function voicemail_menu_alter(&$items) {
  $node_types = node_get_types();
  foreach ($node_types as $node_type => $node_type_details) {
    if (isset($items['admin/content/node-type/'.$node_type.'/fields/'. VOICEMAIL_AUDIO_FIELD_NAME])) {
      $items['admin/content/node-type/'.$node_type.'/fields/'.VOICEMAIL_AUDIO_FIELD_NAME]['access callback'] = 'voicemail_access';
    }

    if (isset($items['admin/content/node-type/'.$node_type.'/fields/'. VOICEMAIL_STATUS_FIELD_NAME])) {
      $items['admin/content/node-type/'.$node_type.'/fields/'. VOICEMAIL_STATUS_FIELD_NAME]['access callback'] = 'voicemail_access';
    }
  }
}

/**
 * Access callback for VoiceMail CCK fields.
 *
 * @param $string
 *   Permission for that field
 * @param $account
 *   Account to be used during permission check.
 * @param $reset
 *   To reset the cache, but we are not using it..........
 */
function voicemail_access($string, $account = NULL, $reset = FALSE) {
  $fields_array = array(
    VOICEMAIL_AUDIO_FIELD_NAME,
    VOICEMAIL_STATUS_FIELD_NAME,
  );

  if (arg(0) == 'admin' && in_array(arg(5), $fields_array)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_views_api().
 */
function voicemail_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'voicemail') .'/views',
  );
}

/**
 * Implementation of hook_form_alter().
 */
function voicemail_form_alter(&$form, &$form_state, $form_id) {
  // Set pre render callback for all the node forms.
  $node_types = node_get_types();
  foreach ($node_types as $node_type => $node_type_details) {
    if ($form_id == $node_type .'_node_form') {
      if (isset($form['#pre_render']) && is_array($form['#pre_render'])) {
        $form['#pre_render'][] = 'voicemail_node_type_form_pre_render';
      }
      else {
        $form['#pre_render'] = array();
        $form['#pre_render'][] = 'voicemail_node_type_form_pre_render';
      }
    }
  }

  switch ($form_id) {
    case 'node_type_form':
      voicemail_node_type_form_alter($form, $form_state);
      break;
    case 'content_field_overview_form':
      $form['#validate'][] = 'voicemail_content_field_overview_form_validate';
      break;
    case 'content_display_overview_form':
      break;
    case 'user_profile_form':
    case 'user_register':
      if (isset($form['#pre_render']) && is_array($form['#pre_render'])) {
        $form['#pre_render'][] = 'voicemail_node_type_form_pre_render';
      }
      else {
        $form['#pre_render'] = array();
        $form['#pre_render'][] = 'voicemail_node_type_form_pre_render';
      }
      break;
  }
}

/**
 * Preprocess content field overview (Manage Fields) form.
 * @param $variables
 *   An array having all the data required to send to the html template
 */
function voicemail_preprocess_content_field_overview_form(&$variables) {
  $escape_fields_array = array(
    VOICEMAIL_AUDIO_FIELD_NAME,
    VOICEMAIL_STATUS_FIELD_NAME
  );
  foreach ($variables['rows'] as $index => $row) {
    if (in_array($row->field_name, $escape_fields_array)) {
      unset($variables['rows'][$index]);
    }

    if ($row->row_type == 'group' && isset($row->group_name) && $row->group_name == VOICEMAIL_GROUP_FIELD_NAME) {
      unset($variables['rows'][$index]);
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function voicemail_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (variable_get('voip_voicemail_use_'. $node->type, FALSE)) {
    module_load_include('inc', 'voicemail', 'includes/voicemail.helper');
    $file = './'. drupal_get_path('module', 'voicemail') ."/includes/voicemail.nodeapi.inc";
    if (is_file($file)) {
      require $file;
    }
  }
}

/**
 * Pre render callback for the node type forms.
 * Set the weight of the voicemail field to display Voicemail field below the
 * VoIP Extension and VoIP directory fields.
 *
 * @param $form
 *   An array having FAPI
 * @return
 *   A FAPI
 */
function voicemail_node_type_form_pre_render($form) {
  if (isset($form[VOICEMAIL_GROUP_FIELD_NAME]['#weight']) && isset($form[VOIPEXTENSION_VOIPDIRECTORY_GROUP_FIELD_NAME]['#weight'])) {
    $form[VOICEMAIL_GROUP_FIELD_NAME]['#weight'] = $form[VOIPEXTENSION_VOIPDIRECTORY_GROUP_FIELD_NAME]['#weight'] + 0.1;
  }
  return $form;
}

/**
 * Dynamically render a view by passing arguments, In voicemail view we need
 * pass VoIP Extension associated with node/user.
 *
 * @return
 *   Themeable output of the sent voicemails view.
 */
function voicemail_user_voicemail_sent() {
  $uid = arg(1);
  module_load_include('inc', 'voipextension', 'includes/voipextension.api');
  $voipextension = VoipExtension::getVoipExtensionFromUid($uid);
  if (isset($voipextension->veid) && $voipextension->veid > 0) {
    $args = array($voipextension->veid);
    return _voicemail_render_view('voicemail_sent_messages', $args);
  }
  else {
    return t('Sorry No data found');
  }
}

/**
 * Dynamically render the received voicemails view by passing arguments, In
 * voicemail view we need pass VoIP Extension associated with node/user.
 *
 * @return
 *   Themeable output of the sent voicemails view.
 */

function voicemail_user_voicemail_received() {
  $uid = arg(1);
  module_load_include('inc', 'voipextension', 'includes/voipextension.api');
  $voipextension = VoipExtension::getVoipExtensionFromUid($uid);
  if (isset($voipextension->veid) && $voipextension->veid > 0) {
    $args = array($voipextension->veid);
    return _voicemail_render_view('voicemail_received_messages', $args);
  }
  else {
    return t('Sorry No data found');
  }
}

/**
 * Renders a Node voicemail sent view., Pass the VoIP Extension as an argument.
 * @return
 *   HTML ourput of the rendered view
 */
function voicemail_node_voicemail_sent() {
  $nid = arg(1);
  module_load_include('inc', 'voipextension', 'includes/voipextension.helper');
  $veid = _voipextension_get_veid_from_nid($nid);
  if (isset($veid) && $veid > 0) {
    $args = array($veid);
    return _voicemail_render_view('voicemail_sent_messages', $args);
  }
  else {
    return t('Sorry No data found');
  }
}

/**
 * Renders the list of voicemails received for a node.
 * @return
 *   Themeable HTML output
 */
function voicemail_node_voicemail_received() {
  $nid = arg(1);
  module_load_include('inc', 'voipextension', 'includes/voipextension.helper');
  $veid = _voipextension_get_veid_from_nid($nid);
  if (isset($veid) && $veid > 0) {
    $args = array($veid);
    return _voicemail_render_view('voicemail_received_messages', $args);
  }
  else {
    return t('Sorry No data found');
  }
}

/**
 * Implementation of hook_views_pre_render().
 *
 * Format the fields exposed by voicemail custom views.
 * Add audio players and formats the status labels
 *
 * @param $view
 *   An object of the current view going to be rendered
 */
function voicemail_views_pre_render(&$view) {
  module_load_include('inc', 'voipextension', 'includes/voipextension.helper');
  switch ($view->name) {
    case 'voicemail_sent_messages':
      foreach ($view->result as $index => $view_field) {
        if (isset($view_field->voicemail_sent_sent_on)) {
          $view->result[$index]->voicemail_sent_sent_on = date('F d, Y h:i A', $view_field->voicemail_sent_sent_on);
        }

        if (isset($view_field->voicemail_sent_audio_message_fid)) {
          $file = _voipextension_get_file_info($view_field->voicemail_sent_audio_message_fid);
          $view->result[$index]->voicemail_sent_audio_message_fid = theme('voipextension_audio_player', $file);
        }
      }
      break;
    case 'voicemail_received_messages':
      foreach ($view->result as $index => $view_field) {
        if (isset($view_field->voicemail_inbox_received_on)) {
          $view->result[$index]->voicemail_inbox_received_on = date('F d, Y h:i A', $view_field->voicemail_inbox_received_on);
        }

        if (isset($view_field->voicemail_inbox_is_new)) {
          if ($view_field->voicemail_inbox_is_new == 1) {
            $view->result[$index]->voicemail_inbox_is_new = t('New');
          }
          else {
            $view->result[$index]->voicemail_inbox_is_new = t('Read');
          }
        }

        if (isset($view_field->voicemail_sent_audio_message_fid)) {
          $file = _voipextension_get_file_info($view_field->voicemail_sent_audio_message_fid);
          $view->result[$index]->voicemail_sent_audio_message_fid = theme('voipextension_audio_player', $file);
        }

      }
      break;
  }
}


/**
 * Implementation of hook_views_post_render().
 *
 * Convert the non html content to html.
 * @param $view
 *   An object of view.
 * @param $output
 *   Themed output of view.
 * @param $cache
 */
function voicemail_views_post_render(&$view, &$output, &$cache) {
  switch ($view->name) {
    case 'voicemail_sent_messages':
      foreach ($view->result as $index => $view_field) {
        if (isset($view_field->voicemail_sent_audio_message_fid)) {
          $view->result[$index]->voicemail_sent_audio_message_fid = html_entity_decode($view->result[$index]->voicemail_sent_audio_message_fid);
        }

        $output = html_entity_decode($output);
      }
      break;
    case 'voicemail_received_messages':
      foreach ($view->result as $index => $view_field) {
        if (isset($view_field->voicemail_sent_audio_message_fid)) {
          $view->result[$index]->voicemail_sent_audio_message_fid = html_entity_decode($view->result[$index]->voicemail_sent_audio_message_fid);
        }

        $output = html_entity_decode($output);
      }
      break;
  }
}

/**
 * Helper function to render a view.
 * @param $view_name
 *   Machine name of the view to be rendered
 * @param $args
 *   An array of arguments that needs to be passed to the view.
 * @return
 *   HTML Output
 */
function _voicemail_render_view($view_name, $args = array()) {
  $output = '';
  $view = views_get_view($view_name);
  $view->set_arguments($args);
  $output = $view->render('default');
  $view->destroy();
  return $output;
}